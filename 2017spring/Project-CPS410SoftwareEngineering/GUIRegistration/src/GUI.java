
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Carson Schutter
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private static ArrayList<User> userDataBase = new ArrayList();
    private static Calendar calendar =  new GregorianCalendar();
    private static Semester winter = new Semester("Winter" , 2018);
    private static Semester fSummer = new Semester("First Semester Summer" , 2017);
    private static Semester sSummer = new Semester("Second Semester Summer", 2017);
    private static Semester fall = new Semester("Fall", 2017);
    private static User currentUser;
   
    
   
    
    public GUI() {
        initComponents();
        LogoutButton.setVisible(false);
        SemesterLabel.setVisible(false);
        Semester.setVisible(false);
        ClassListField.setVisible(false);
        RegisterListField.setVisible(false);
        AvailableClassLabel.setVisible(false);
        RegisteredClassLabel.setVisible(false);
        DropClassButton.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Screen = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        UsernameLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        UsernameField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        Button = new javax.swing.JButton();
        ErrorMessage = new javax.swing.JLabel();
        LogoutButton = new javax.swing.JButton();
        Semester = new javax.swing.JComboBox<>();
        SemesterLabel = new java.awt.Label();
        ClassListField = new javax.swing.JScrollPane();
        ClassList = new javax.swing.JList<>();
        RegisterListField = new javax.swing.JScrollPane();
        RegisterList = new javax.swing.JList<>();
        AvailableClassLabel = new javax.swing.JLabel();
        RegisteredClassLabel = new javax.swing.JLabel();
        DropClassButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registration System");

        Screen.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CMU Registration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 24))); // NOI18N
        Screen.setOpaque(false);

        Title.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        Title.setText("Class Registration");

        UsernameLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        UsernameLabel.setText("Username");

        PasswordLabel.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        PasswordLabel.setText("Password");

        UsernameField.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        PasswordField.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N

        Button.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Button.setText("Login");
        Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonActionPerformed(evt);
            }
        });

        LogoutButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        Semester.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        Semester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Winter", "First Semester Summer", "Second Semester Summer", "Fall" }));
        Semester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SemesterActionPerformed(evt);
            }
        });

        SemesterLabel.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        SemesterLabel.setText("Semester");

        ClassList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ClassList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ClassList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ClassListField.setViewportView(ClassList);

        RegisterList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        RegisterList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        RegisterList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        RegisterListField.setViewportView(RegisterList);

        AvailableClassLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        AvailableClassLabel.setText("Available Classes");

        RegisteredClassLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        RegisteredClassLabel.setText("Registered Classes");

        DropClassButton.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        DropClassButton.setText("Drop Class");
        DropClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DropClassButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ScreenLayout = new javax.swing.GroupLayout(Screen);
        Screen.setLayout(ScreenLayout);
        ScreenLayout.setHorizontalGroup(
            ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ScreenLayout.createSequentialGroup()
                        .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(243, 243, 243)
                        .addComponent(DropClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Button, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ScreenLayout.createSequentialGroup()
                        .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ScreenLayout.createSequentialGroup()
                                .addComponent(UsernameLabel)
                                .addGap(293, 293, 293)
                                .addComponent(ErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PasswordLabel)
                            .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ClassListField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AvailableClassLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RegisteredClassLabel)
                            .addComponent(RegisterListField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(ScreenLayout.createSequentialGroup()
                .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ScreenLayout.createSequentialGroup()
                        .addComponent(SemesterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(Semester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ScreenLayout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(Title)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ScreenLayout.setVerticalGroup(
            ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ScreenLayout.createSequentialGroup()
                .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ScreenLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RegisteredClassLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RegisterListField, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ScreenLayout.createSequentialGroup()
                        .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ScreenLayout.createSequentialGroup()
                                .addComponent(Title)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                                .addComponent(Semester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ScreenLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SemesterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ScreenLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(UsernameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(UsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PasswordLabel)
                                .addGap(18, 18, 18)
                                .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ScreenLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AvailableClassLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClassListField, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(43, 43, 43)
                .addGroup(ScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                    .addComponent(DropClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        Title.getAccessibleContext().setAccessibleName("ClassRegistrationText");
        UsernameLabel.getAccessibleContext().setAccessibleName("UsernameText");
        PasswordLabel.getAccessibleContext().setAccessibleName("PasswordText");
        UsernameField.getAccessibleContext().setAccessibleName("Username");
        PasswordField.getAccessibleContext().setAccessibleName("Password");

        getContentPane().add(Screen, java.awt.BorderLayout.CENTER);
        Screen.getAccessibleContext().setAccessibleName("LoginScreen");
        Screen.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonActionPerformed
        // TODO add your handling code here:
        if(Button.getText().equals("Login")){
        boolean wrongPassword = false;
        for(int index=0;index<userDataBase.size();index++){
        if(userDataBase.get(index).getUserName().equals(UsernameField.getText())){
        //found a username
        for(int indexPass=0;indexPass<userDataBase.size();indexPass++){
           if(userDataBase.get(index).getPassword().equals(PasswordField.getText())){
               //found password
           currentUser = userDataBase.get(index);
           //Screen.setVisible(false);
           int currentTerm = calendar.get(Calendar.MONTH);
           int semester = computeSemester(currentTerm);
               try {
                   readFile1();
               } catch (IOException ex) {
                   Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
               }
           if(semester == 0){
               setRegisteredClasses(currentUser, winter);
           setAvailableClasses(winter,currentUser);
           }else if(semester == 1){
               setRegisteredClasses(currentUser, fSummer);
           setAvailableClasses(fSummer,currentUser);
           }else if(semester == 2){
               setRegisteredClasses(currentUser, sSummer);
           setAvailableClasses(sSummer,currentUser);
           }else{
               setRegisteredClasses(currentUser, fall);
           setAvailableClasses(fall,currentUser);
           }
           PasswordLabel.setVisible(false);
           PasswordField.setVisible(false);
           UsernameLabel.setVisible(false);
           UsernameField.setVisible(false);
           LogoutButton.setVisible(true);
           ErrorMessage.setVisible(false);
           SemesterLabel.setVisible(true);
           Semester.setVisible(true);
           Semester.setSelectedIndex(semester);
           ClassListField.setVisible(true);
           RegisterListField.setVisible(true);
           AvailableClassLabel.setVisible(true);
           RegisteredClassLabel.setVisible(true);
           DropClassButton.setVisible(true);
           Button.setText("Register Class");
           break;
           
           }else{
           //error password dosnt match
           ErrorMessage.setText("Password is incorrect");
           wrongPassword = true;
           break;
           }
        }
        }
        }
        //no username found
        if(wrongPassword == false){
         ErrorMessage.setText("No username found");
        }
    }else{
        //register
ListModel model = new DefaultListModel();
        model = ClassList.getModel();
        int semester = Semester.getSelectedIndex();
        Semester currentSemester = getCurrentSemester(semester);
        if(ClassList.getSelectedIndex() != -1){
        Object tempp = model.getElementAt(ClassList.getSelectedIndex());
        String temp = tempp.toString();
        Class[] listOfClasses = new Class[10];
        listOfClasses = currentSemester.getClasses();
        for(int i=0;i<2;i++){
            if(listOfClasses[i].toString().equals(temp)){
            currentUser.addRegisteredClass(listOfClasses[i]);
            setRegisteredClasses(currentUser, currentSemester);
            setAvailableClasses(currentSemester, currentUser);
          
            }
        }
        }
        }
//LoginScreen.setVisible(false);
        
    }//GEN-LAST:event_ButtonActionPerformed

    private void SemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SemesterActionPerformed
        // TODO add your handling code here:
        int semester;
        semester = Semester.getSelectedIndex();
         if(semester == 0){
             setRegisteredClasses(currentUser, winter);
           setAvailableClasses(winter , currentUser);
           }else if(semester == 1){
               setRegisteredClasses(currentUser, fSummer);
           setAvailableClasses(fSummer,currentUser);
           }else if(semester == 2){
               setRegisteredClasses(currentUser, sSummer);
           setAvailableClasses(sSummer,currentUser);
           }else{
               setRegisteredClasses(currentUser, fall);
           setAvailableClasses(fall, currentUser);
           }
    }//GEN-LAST:event_SemesterActionPerformed

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        Button.setText("Login");
        LogoutButton.setVisible(false);
        SemesterLabel.setVisible(false);
        Semester.setVisible(false);
        ClassListField.setVisible(false);
        RegisterListField.setVisible(false);
        AvailableClassLabel.setVisible(false);
        RegisteredClassLabel.setVisible(false);
        DropClassButton.setVisible(false);
        
           PasswordLabel.setVisible(true);
           PasswordField.setVisible(true);
           UsernameLabel.setVisible(true);
           UsernameField.setVisible(true);
           ErrorMessage.setVisible(true);
           ErrorMessage.setText("");
           PasswordField.setText("");
        try {
            currentUser.writeFile1();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
           
           currentUser = null;
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void DropClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DropClassButtonActionPerformed
        ListModel model = new DefaultListModel();
        model = RegisterList.getModel();
        int semester = Semester.getSelectedIndex();
        Semester currentSemester = getCurrentSemester(semester);
        if(RegisterList.getSelectedIndex() != -1){
        Object tempp = model.getElementAt(RegisterList.getSelectedIndex());
        String temp = tempp.toString();
        Class[] listOfClasses = new Class[100];
        listOfClasses = currentUser.getClasses();
        for(int i=0;i<listOfClasses.length;i++){
            if(listOfClasses[i] !=null)
            if(listOfClasses[i].toString().equals(temp)){
            currentUser.dropRegisteredClass(listOfClasses[i]);
            setRegisteredClasses(currentUser, currentSemester);
            setAvailableClasses(currentSemester, currentUser);
            break;
            }
        }}
      
    }//GEN-LAST:event_DropClassButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        File userFile = new File("Users.txt");
        Scanner scan = new Scanner(userFile);
        String line;
        String[] userArray = new String[2];
        do{
        line = scan.nextLine();
        userArray = line.split(" ");
        //index 0 is username, index 1 is password
        User user = new User(userArray[0],userArray[1]);
           userDataBase.add(user);
        }while(scan.hasNextLine());
        
        
        File classFile = new File("classList.txt");
        Scanner classScan = new Scanner(classFile);
        String lineForClass;
        Class[] currentSemesterClasses = new Class[10];
        String[] classArray = new String[9];

        do{
        lineForClass = classScan.nextLine();
        classArray = lineForClass.split(" ");
        //<semester> <type> <number> <name> <building> <room> <credit> <day> <time>
        if(classArray[0].equals("Winter")){
            winter.addClass(new Class(classArray[1],Integer.valueOf(classArray[2]),classArray[3],classArray[4],Integer.valueOf(classArray[5]),Integer.valueOf(classArray[6]),classArray[7],classArray[8],classArray[0]));
        }else if(classArray[0].equals("Summerone")){
            fSummer.addClass(new Class(classArray[1],Integer.valueOf(classArray[2]),classArray[3],classArray[4],Integer.valueOf(classArray[5]),Integer.valueOf(classArray[6]),classArray[7],classArray[8],classArray[0]));
        }else if(classArray[0].equals("Summertwo")){
            sSummer.addClass(new Class(classArray[1],Integer.valueOf(classArray[2]),classArray[3],classArray[4],Integer.valueOf(classArray[5]),Integer.valueOf(classArray[6]),classArray[7],classArray[8],classArray[0]));
        }else if(classArray[0].equals("Fall")){
            fall.addClass(new Class(classArray[1],Integer.valueOf(classArray[2]),classArray[3],classArray[4],Integer.valueOf(classArray[5]),Integer.valueOf(classArray[6]),classArray[7],classArray[8],classArray[0]));
        }
          
        }while(classScan.hasNextLine());
       
        
 
        
        
        
        
        
    }
    
    public Semester getCurrentSemester(int semester){
           if(semester == 0){
           return winter;
           }else if(semester == 1){
           return fSummer;
           }else if(semester == 2){
           return sSummer;
           }else{
           return fall;
           }
    }
    
    public void setAvailableClasses(Semester semester , User user){
DefaultListModel model = new DefaultListModel();
    Class[] userListOfClasses = new Class[100];
    Class[] listOfClasses = new Class[10];
    listOfClasses = semester.getClasses();
    userListOfClasses = user.getClasses();
    boolean notTheSame = true;
    for(int i =0;i<listOfClasses.length;i++){
        notTheSame =true;
    if(listOfClasses[i] != null)
    {
        for(int x=0;x<userListOfClasses.length;x++){
        if(userListOfClasses[x] == listOfClasses[i]){
        notTheSame = false;
        }else{
        
    }
    }
                if(notTheSame == true){
            model.addElement(listOfClasses[i]);
        }
    }
    }
    MyCellRenderer cellRenderer = new MyCellRenderer(80);
    ClassList.setCellRenderer(cellRenderer);
    ClassList.setModel(model);
    }
    
    public void setRegisteredClasses (User user , Semester semester){
        DefaultListModel model = new DefaultListModel();
         Class[] semesterListOfClasses = new Class[10];
        Class[] listOfClasses = new Class[100];
       listOfClasses = user.getClasses();
           semesterListOfClasses = semester.getClasses();
        for(int i =0;i<listOfClasses.length;i++){
             if(listOfClasses[i] != null){
                  for(int x=0;x<semesterListOfClasses.length;x++){
        if(semesterListOfClasses[x] == listOfClasses[i]){
            model.addElement(listOfClasses[i]);
        }else{    
        }
        }
                 
                  
             }
        }
            MyCellRenderer cellRenderer = new MyCellRenderer(80);
    RegisterList.setCellRenderer(cellRenderer);
    RegisterList.setModel(model);
    }
    
    	public static int computeSemester(int month)
	{
		if(month >= 0 && month < 3)
			return 0; 	// return winter
		else if(month >= 3 && month < 5)
			return 1;	// return summer 1 
		else if(month >= 5 && month < 6)
			return 2; 	// return summer 2
		else if(month >= 6 && month < 10)
			return 3;	// return fall 
		else
			return 0;	
	}
	class MyCellRenderer extends DefaultListCellRenderer {
   public static final String HTML_1 = "<html><body style='width: ";
   public static final String HTML_2 = "px'>";
   public static final String HTML_3 = "</html>";
   private int width;

   public MyCellRenderer(int width) {
      this.width = width;
   }

   @Override
   public Component getListCellRendererComponent(JList list, Object value,
         int index, boolean isSelected, boolean cellHasFocus) {
      String text = HTML_1 + String.valueOf(width) + HTML_2 + value.toString()
            + HTML_3;
      return super.getListCellRendererComponent(list, text, index, isSelected,
            cellHasFocus);
   }

}
        
                public static void readFile1() throws IOException{
        File myFile = new File("RegisterList.txt");
            Scanner scan = new Scanner(myFile);
            String line;
            String[] putInto = new String[10];
            Semester currentSemester = winter;
            while(scan.hasNext()){
            line=scan.nextLine();
            putInto = line.split(" ");
            if(putInto[0].equals(currentUser.getUserName())){
                
            if(putInto[1].equals("Winter")){
            currentSemester = winter;
            }else if(putInto[1].equals("Summerone")){
            currentSemester = fSummer;
            }else if(putInto[1].equals("Summertwo")){
            currentSemester = sSummer;
            }else if(putInto[1].equals("Fall")){
            currentSemester = fall;
            }
            Class[] semesterListOfClasses = new Class[10];
            semesterListOfClasses = currentSemester.getClasses();
            for(int i =0; i<semesterListOfClasses.length;i++){
            if(semesterListOfClasses[i] != null){
            String check = putInto[1] + " " + putInto[2] + " " + putInto[3] + " " + putInto[4] + " " + putInto[5] + " " + putInto[6] + " " + putInto[7] + " " + putInto[8] + " " + putInto[9];
            if(semesterListOfClasses[i].outWrite().equals(check)){
            currentUser.addRegisteredClass(semesterListOfClasses[i]);
            }
            }
            }
            }
            }
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AvailableClassLabel;
    private javax.swing.JButton Button;
    private javax.swing.JList<String> ClassList;
    private javax.swing.JScrollPane ClassListField;
    private javax.swing.JButton DropClassButton;
    private javax.swing.JLabel ErrorMessage;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JList<String> RegisterList;
    private javax.swing.JScrollPane RegisterListField;
    private javax.swing.JLabel RegisteredClassLabel;
    private javax.swing.JPanel Screen;
    private javax.swing.JComboBox<String> Semester;
    private java.awt.Label SemesterLabel;
    private javax.swing.JLabel Title;
    private javax.swing.JTextField UsernameField;
    private javax.swing.JLabel UsernameLabel;
    // End of variables declaration//GEN-END:variables
}
